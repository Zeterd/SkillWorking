1º objetivo
   - Fazer um programa que fosse single core para perceber melhor o conceito do problema

Relatorio ao longo do 1º objetivo:
 - Fazer input de uma matrix (done)
    (uso de malloc and free)
 - Fazer input dos parametros
 - Como fazer a grid
   SOL: usar inteiro** para criar uma especie de matriz 2D
 - Como implementar o algoritmo?
 
 1º execuçao do 1º ojetivo:
   - Como sempre erros na compilaçao :)
   - Depois de corrigidos os erros alguns problemas em segmentaçao mas rapidamente corrigidos
   - Uso da variavel predefinida do C de INFINITO nao resultou (AINDA A CORRIGIR)   
         --> Neste momento estou a usar uma variavel com um grnade valor a representar o INFINITO
   - Programa a calcular com sucesso
   - Exprimentaçao de outros inputs
   - Uso de uma libraria de TIME.h para medir tempo de execuçao(AINDA A FAZER)

  Resultados:
   Specs Maquina:
      i7-4770HQ (4cores/8threads) 3.3Ghz
      16GB RAM
   Specs Maquinas Lab FCUP:
      //TODO

   Teste de varios inputs de varios tamanhos usando apenas 1 processador
  
   Ficheiro          N*N            Tempo(segundos)     
   
   Input-padrao:     6              0.00                    
   Input300          300            1.77                    
   Input600          600            17.84                   
   Input900          900            64.80                   
   Input1200         1200           251.10

   (
      //TODO: desenhar grafico bonito com a representaçao de resultados
      //TODO: nao so fazer a comparaçao de performace/tempo mas tambem a memoria ocupada
   )

2º objetivo -- Começar a pensar em paralelo!!
   - Que estrategia usar
      Blocking or non-blocking
      Uso de comunicador global ou outros em especificos
      Como comunicar a memoria? Uso de metodos proprios?
      SendRecv vs ScatterGather
      AllReduce? AllGather?
      Bcast?
      Perceber o algoritmo FOX
      Uso de MPI_Cartesiano?? (Averiguar!!)

   - Non-blocking Functions:
      Bcast 1->N
      Scatter 1->N
      Gather N->1
      Reduce 1->N
      AllReduce N->N
      AllGather N->N

UPDATE:
   Apos da primeira execuçao com input6 e 4CPUs o programa entra em loop infinito
      PROB: MPI_Sendrecv blocqueado!!
      SOL: some bugs in the way...
   
   Apos completaçao do codigo, os processador crasham
      PROB: sem \n nos printfs
      SOL: adicionar \n nos printfs daaah...

   Apos correçao de erros, o output esta errado
      PROB:
         (1) -> Allocaçao mal da memoria
         (2) -> Send e Recv mal coordenados
         (3) -> Algum bug ao longo do codigo

         SOL: era o ponto (3) que tava certo e por isso foi feita a correçao

   Iniciaçao de testes locais

   No output esta um valor mal com o SendRecv nao sei do que pode ser
